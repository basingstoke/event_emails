{
  "name": "grunt-ejs-render",
  "description": "Render EJS templates with custom data and helpers",
  "version": "0.2.7",
  "homepage": "https://github.com/dwightjack/grunt-ejs-render",
  "author": {
    "name": "Marco Solazzi",
    "email": "marco.solazzi@gmail.com",
    "url": "https://twitter.com/dwightjack"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dwightjack/grunt-ejs-render.git"
  },
  "bugs": {
    "url": "https://github.com/dwightjack/grunt-ejs-render/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/dwightjack/grunt-ejs-render/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "ejs": "~1.0.0",
    "marked": "~0.3.2",
    "lodash": "~2.4.1",
    "underscore.string": "~2.4.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt": "~0.4.5"
  },
  "peerDependencies": {
    "grunt": "~0.4.5"
  },
  "keywords": [
    "gruntplugin",
    "ejs",
    "render"
  ],
  "readme": "# grunt-ejs-render\n\n> Render ejs templates with custom data and helpers\n\nThis plugin provides ejs static rendering to enhance static file development.\n\nAside from default [ejs features](https://github.com/visionmedia/ejs#features) it provides:\n\n* Lo-Dash/underscore functions (http://lodash.com/docs)\n* Lo-Dash/underscore templates powered view partials (http://lodash.com/docs#template)\n* markdown parsing via a custom ejs filter\n* an easy way to define custom _per task_ helpers \n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-ejs-render --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-ejs-render');\n```\n\n## The \"render\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `render` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  render: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    }\n  }\n})\n```\n\n### Options\n\n#### options._\nType: `Object`\nDefault value: `_`\n\nA reference to a [Lo-Dash](http://lodash.com) build. Defaults to the full [Lo-Dash](http://lodash.com) from npm integrated with [Underscore.string](https://github.com/epeli/underscore.string).\n\n\n```js\n\n//load a Backbone build of Lo-Dash\nvar bb_ = require('./customlibs/lodash/lodash-backbone.js');\n\ngrunt.initConfig({\n  render: {\n    options: {\n     '_' : bb_ \n    }\n    //...\n  }\n})\n```\n\n\n\nInside a template you may access Lo-Dash functions from `_`:\n\n```\n<p><%= _.first(['orange', 'lemon', 'apple']) %></p>\n<!-- outputs <p>orange</p> -->\n```\n\n\n#### options.data\nType: `Object|Array|Function`\nDefault value: `null`\n\nAn object containing dynamic data to be passed to templates. \n\nIf data is a function, actual data passed to template is result of that function.\n\nYou may also pass an array of JSON filepaths (any Grunt compatible globbing and template syntax is supported). `options.data` will be populated with files' contents.\n\n```js\ngrunt.initConfig({\n  render: {\n    first_target: {\n    options: {\n      data: ['path/to/my-file.json', 'path/to/my-other-file.json']\n      }\n      \n    },\n    second_target: {\n      options: {\n      data: { 'prop': 'my test'}\n      }\n      \n    },\n    third_target: {\n      options: {\n        data: function () {\n          return { 'prop': 'my test'};\n        }\n      }\n    }\n  }\n})\n```\n\nTo access datas from inside a template use `data.` namespace:\n\n```\n<p><%= data.prop %></p>\n```\n\nWhen filepaths are provided, filenames are processed to create new namespaces:\n\n```\n<!-- read from path/to/my-file.json -->\n<p><%= data.myFile.whatever %></p>\n\n<!-- read from path/to/my-other-file.json -->\n<p><%= data.myOtherFile.whateveragain %></p>\n```\n\n\n#### options.templates\nType: `Mixed`\nDefault value: `[]`\n\nAn [array of files](http://gruntjs.com/configuring-tasks#files) of [Lo-Dash templates](http://lodash.com/docs#template) to be used inside a main template file. May be useful to reuse client side templates to render a static file.\n\nCompiled templates will be indexed by their filename without extension, and are accessible with the `helpers.template` helper method\n\nTemplate configuration\n\n```js\ngrunt.initConfig({\n  render: {\n    options: {\n      templates: ['templates/*.tpl']\n    }\n  }\n})\n```\n\nUsage\n\n```\n<!-- templates/list.tpl -->\n\n<% fruits.forEach(function (fruit) { %>\n  <li><%= fruit %></li>\n<% }); %>\n```\n\n```\n<!-- main.html -->\n\n<p><%= helpers.template('list', {fruits: ['orange', 'lemon', 'apple']}) %></p>\n```\n\n#### options.partialPaths\nType: `Array`\nDefault value: `[]`\n\nAn array of paths where partials may be stored. Accepts both absolute and relative paths.  \nRelative paths are resolved from `Gruntfile.js` location.\n\nThis option is used by the `getMTime` and `readPartial` helpers.\n\n```js\ngrunt.initConfig({\n  render: {\n    options: {\n      partialPaths: ['app/includes/']\n    }\n  }\n});\n```\n\n```\n<!-- includes app/includes/block.html -->\n<div><%- helpers.readPartial('block.html') %></div>\n```\n\n\n#### options.helpers\nType: `Object`\nDefault value: `{}`\n\nHash of custom methods for usage inside a template. Within helpers, `this` refers to the current tasks' options.\n\nDefault helpers are:\n\n* `template('templatename', dataObject)`: executes a precompiled Lo-Dash template (if available) with provided data object\n* `getMTime('filepath')`: returns the last modified time (as unix timestamp) of the passed in file.\n* `readPartial('filepath')`: includes the content of the passed in file.\n* `renderPartial('filepath', dataObject)`: renders passed in template, properties of `dataObject` are available as template local variables.\n\nHelpers configuration\n\n```js\ngrunt.initConfig({\n  render: {\n    options: {\n      helpers: {\n        //set a custom helper\n        timestamp: function () { return new Date().getTime(); },\n        getName: function () { return this.data.name; }\n      },\n      data: {\n        name: 'John'\n      }\n    }\n  }\n})\n```\n\nUsage inside templates\n\n```\n<!-- cache bursting -->\n<script src=\"/lib/script.js?v=<%= helpers.getMTime('/lib/script.js') %>\"></script>\n\n<!-- lo dash template -->\n<%= helpers.template('list', {fruits: ['orange', 'lemon', 'apple']}) %>\n\n<!-- custom helper -->\nbuild timestamp: <%= helpers.timestamp() %>\n\n<!-- task's options within helpers  -->\nHi <%= helpers.getName() %>\n<-- outputs: Hi John -->\n```\n\n### Custom ejs Filter\n\nThe plugin adds the `md` custom filter to ejs, which leverages [marked](https://github.com/chjj/marked) to parse markdown syntax:\n\n```\n<%-: **markdown rocks!** | md %>\n<!-- prints <p><strong>markdown rocks!</strong></p>-->\n```\n\nYou may use this filter in conjunction with `readPartial` helpers to import markdown files\n\n```\n<%-: helpers.readPartial('md/about-us.md') | md %>\n```\n\n### Usage Examples\n\n#### Default Options\nTo process a file with ejs just pass it to the `files` array:\n\n```js\ngrunt.initConfig({\n  render: {\n    options: {},\n    html: {\n      files: {\n        'dest/index.html': ['src/index.html']\n      }\n    }\n  }\n});\n```\n\n#### Custom Options\nYou may provide custom options:\n\n```js\ngrunt.initConfig({\n  render: {\n    options: {\n      data: ['data/fruits.json']\n      helpers: {\n        timestamp: function () { return new Date().getTime(); }\n      },\n      templates: ['templates/*.tpl']\n    },\n    fruits: {\n        files: {\n          'dest/fruits.html': ['src/fruits.html']\n      }\n    }\n  }\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n0.2.7 - updated dependencies, `data` options now accepts a function which returns an object (thanks @ertrzyiks)\n\n0.2.6 - fix typos (thanks @derekbasch) and updated dependencies\n\n0.2.5 - merged [PR](https://github.com/dwightjack/grunt-ejs-render/pull/5)\n\n0.2.4 - added `renderPartial` helper (thanks to [Piotr Walczyszyn](https://github.com/pwalczyszyn))\n\n0.2.3 - Bound helpers context to current task's options\n\n0.2.2 - Improved `options.data` option by adding filepaths processing\n\n0.2.1 - Replaced deprecated reference to `grunt.util._` with `lodash` and `uderscore.string` npm modules\n\n0.2.0 - Added `readPartial` helper, `partialPaths` option and `md` custom filter\n\n0.1.1 - Better Docs\n\n0.1.0 - Initial release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-ejs-render@0.2.7",
  "_from": "grunt-ejs-render@~0.2"
}
